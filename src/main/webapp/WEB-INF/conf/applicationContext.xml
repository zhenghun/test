<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

       <!--作用是将注解的bean自动装载入spring容器。和spring mvc中的自动扫描会重复-->
       <context:component-scan base-package="com.xbzheng"/>
       <!--自动装载属性文件-->
       <context:property-placeholder location="classpath:jdbc.properties"/>

       <!--配置数据源 使用c3p0-->
       <bean id="dataSorce" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
              <property name="driverClass" value="${jdbc.driver}"/>
              <property name="jdbcUrl" value="${jdbc.url}"/>
              <property name="user" value="${jdbc.user}"/>
              <property name="password" value="${jdbc.password}"/>
       </bean>

       <!--配置mybatis的SqlSessionFactory-->
       <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <!--添加数据源属性-->
              <property name="dataSource" ref="dataSorce"/>
              <!--指定mybatis的总配置文件-->
              <!--
              <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
              -->
              <!--不用指定mybatis的总配置文件，和configLocation选其一即可-->
              <property name="mapperLocations" value="classpath:com/xbzheng/model/*.map.xml"/>
       </bean>

       <!-- 扫描basePackage下所有以@MyBatisDao注解的接口，MyBatisDao自定义注解
       <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
              <property name="basePackage" value="com.xbzheng"/>
              <property name="annotationClass" value="com.xbzheng.common.persistence.annotation.MyBatisDao"/>
       </bean>
       -->
       <!--通过创建的sessionFactory来生成mybatis的SqlSession对象-->
       <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
              <constructor-arg index="0" ref="sessionFactory"/>
       </bean>

       <!--配置事务管理-->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="dataSorce"/>
       </bean>

       <!--配置事务传播属性-->
       <tx:advice id="txAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <tx:method name="add*" propagation="REQUIRED"/>
                     <tx:method name="insert*" propagation="REQUIRED"/>
                     <tx:method name="delete*" propagation="REQUIRED"/>
                     <tx:method name="remove*" propagation="REQUIRED"/>
                     <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
              </tx:attributes>
       </tx:advice>

       <!--声明式事务配置-->
       <aop:config>
              <!--配置横切入点-->
              <aop:pointcut id="pointcut" expression="execution(* com.xbzheng.service..*.*(..))" />
              <!--配置切入点通知-->
              <aop:advisor pointcut-ref="pointcut" advice-ref="txAdvice"/>
       </aop:config>

       <!-- 配置该bean之后就不需要实现dao接口，spring 会自动为dao接口创建相应的实现类，通过代理反射的方式 -->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <!--basePackage指定要扫描的包，在此包之下的映射器都会被搜索到。可指定多个包，包与包之间用逗号或分号分隔-->
              <property name="basePackage" value="com.xbzheng.dao"></property>
       </bean>
</beans>